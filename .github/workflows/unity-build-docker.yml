name: Unity Build (Docker)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  buildWithLinux:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
          - WebGL
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      
      - name: Cache Library folder
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-
            Library-
      
      # Free up disk space
      - name: Free Disk Space
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq) || true
          df -h
      
      # Build with Unity using Docker image
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL || '' }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD || '' }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE || '' }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: auto  # Let it auto-detect from ProjectVersion.txt
          buildName: LazyPortfolio
          buildsPath: build
          allowDirtyBuild: true
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
          retention-days: 30
      
      # Deploy WebGL to GitHub Pages
      - name: Prepare WebGL for deployment
        if: matrix.targetPlatform == 'WebGL' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p public
          cp -r build/WebGL/LazyPortfolio/* public/
          
          # Create an index.html if it doesn't exist
          if [ ! -f public/index.html ]; then
            echo '<!DOCTYPE html>
            <html lang="en-us">
              <head>
                <meta charset="utf-8">
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                <title>LazyPortfolio</title>
                <link rel="shortcut icon" href="TemplateData/favicon.ico">
                <link rel="stylesheet" href="TemplateData/style.css">
              </head>
              <body>
                <div id="unity-container" class="unity-desktop">
                  <canvas id="unity-canvas" width=960 height=600></canvas>
                  <div id="unity-loading-bar">
                    <div id="unity-logo"></div>
                    <div id="unity-progress-bar-empty">
                      <div id="unity-progress-bar-full"></div>
                    </div>
                  </div>
                </div>
                <script src="Build/LazyPortfolio.loader.js"></script>
                <script>
                  createUnityInstance(document.querySelector("#unity-canvas"), {
                    dataUrl: "Build/LazyPortfolio.data",
                    frameworkUrl: "Build/LazyPortfolio.framework.js",
                    codeUrl: "Build/LazyPortfolio.wasm",
                    streamingAssetsUrl: "StreamingAssets",
                    companyName: "LazyGameDevs",
                    productName: "LazyPortfolio",
                    productVersion: "1.0",
                  });
                </script>
              </body>
            </html>' > public/index.html
          fi
      
      - name: Upload Pages artifact
        if: matrix.targetPlatform == 'WebGL' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: buildWithLinux
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
